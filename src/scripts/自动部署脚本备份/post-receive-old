#!/bin/bash
# 任何命令失败时立即退出，确保部署流程的完整性
set -e


# 修复 Git 仓库所有权
sudo chown -R $(whoami):$(whoami) /var/www/cloudloom-server/repo.git

# 或添加安全目录（二选一）
git config --global --add safe.directory /var/www/cloudloom-server/repo.git

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # 无色

# =========================================================================
# NestJS 后端自动化部署脚本（带彩色输出）
# =========================================================================

PROJECT_NAME="cloudloom-server"
DEPLOY_ROOT="/var/www/${PROJECT_NAME}"
RELEASES_DIR="${DEPLOY_ROOT}/releases"
CURRENT_SYMLINK="${DEPLOY_ROOT}/current"
ENV_FILE="${DEPLOY_ROOT}/.env"
# PM2 会从这里读取配置
ECOSYSTEM_CONFIG_FILE="${DEPLOY_ROOT}/ecosystem.config.js"
# 定义运行 NestJS 应用的用户和组
APP_USER="cloudloom"
APP_GROUP="cloudloom"

echo -e "${BLUE}==================================================================${NC}"
echo -e "${GREEN}Starting deployment for ${PROJECT_NAME} at $(date)${NC}"
echo -e "${BLUE}==================================================================${NC}"

RELEASE_NAME=$(date +"%Y%m%d%H%M%S")
RELEASE_PATH="${RELEASES_DIR}/${RELEASE_NAME}"

# 1. 创建新的发布目录
mkdir -p "${RELEASE_PATH}"
if [ ! -d "${RELEASE_PATH}" ]; then
    echo -e "${RED}Error: Failed to create release directory. Aborting deployment.${NC}"
    exit 1
fi

echo -e "${YELLOW}Archiving latest code into new release directory: ${RELEASE_PATH}${NC}"
git archive --format=tar main | tar -xf - -C "${RELEASE_PATH}"

# 2. 进入新的发布目录进行操作
cd "${RELEASE_PATH}" || { echo -e "${RED}Error: Failed to change directory to ${RELEASE_PATH}. Aborting.${NC}"; exit 1; }

# 3. 复制 .env 文件
if [ -f "${ENV_FILE}" ]; then
    cp "${ENV_FILE}" .env
    echo -e "${GREEN}.env file copied to ${RELEASE_PATH}/.env.${NC}"
else
    echo -e "${RED}Warning: .env file not found at ${ENV_FILE}, please check!${NC}"
fi

# 4. 复制最新版本的 ecosystem.config.js 到 DEPLOY_ROOT
# 这样 PM2 才能在 DEPLOY_ROOT 找到它
echo -e "${YELLOW}Copying latest ecosystem.config.js from release to ${DEPLOY_ROOT} for PM2...${NC}"
if [ -f "./ecosystem.config.js" ]; then
    cp "./ecosystem.config.js" "${DEPLOY_ROOT}/ecosystem.config.js"
    echo -e "${GREEN}ecosystem.config.js copied from ${RELEASE_PATH} to ${DEPLOY_ROOT}.${NC}"
else
    echo -e "${RED}Error: ecosystem.config.js not found in new release at ${RELEASE_PATH}. Aborting deployment.${NC}"
    exit 1
fi

# 5. 安装依赖并构建项目
echo -e "${YELLOW}Installing dependencies...${NC}"
npm install --production

echo -e "${YELLOW}Building NestJS project...${NC}"
npx nest build

# 6. 更新 'current' 符号链接
echo -e "${YELLOW}Updating 'current' symlink to point to the new release's 'dist' directory...${NC}"
ln -nfs "${RELEASE_PATH}/dist" "${CURRENT_SYMLINK}"

# 7. 修复文件所有权和权限
echo -e "${YELLOW}Fixing file ownership and permissions for user ${APP_USER}...${NC}"
chown -R ${APP_USER}:${APP_GROUP} "${DEPLOY_ROOT}"
# 赋予适当的读取权限，目录可执行，文件可读写
chmod -R u=rwX,g=rX,o=rX "${DEPLOY_ROOT}"
echo -e "${GREEN}File ownership and permissions fixed for ${DEPLOY_ROOT}.${NC}"

# 8. 使用 PM2 管理服务
echo -e "${YELLOW}Managing pm2 service with ecosystem.config.js...${NC}"
pm2 startOrReload "${ECOSYSTEM_CONFIG_FILE}" --env production

# 9. 清理旧版本
echo -e "${YELLOW}Cleaning up old releases...${NC}"
# 保留最新的5个发布版本
ls -t "${RELEASES_DIR}" | tail -n +6 | xargs -I {} rm -rf "${RELEASES_DIR}/{}"

echo -e "${BLUE}==================================================================${NC}"
echo -e "${GREEN}Deployment successful! New version is live.${NC}"
echo -e "${BLUE}==================================================================${NC}"

exit 0